Index: sundials-2.5.0/CMakeLists.txt
===================================================================
--- sundials-2.5.0.orig/CMakeLists.txt	2012-07-09 16:10:55.000000000 +0200
+++ sundials-2.5.0/CMakeLists.txt	2012-07-09 16:14:25.000000000 +0200
@@ -18,7 +18,7 @@
 
 # Require a fairly recent cmake version
 
-CMAKE_MINIMUM_REQUIRED(VERSION 2.2)
+CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
 
 # Project SUNDIALS (initially only C supported)
 
@@ -28,9 +28,9 @@
 
 SET(PACKAGE_BUGREPORT "radu@llnl.gov")
 SET(PACKAGE_NAME "SUNDIALS")
-SET(PACKAGE_STRING "SUNDIALS 2.4.0")
+SET(PACKAGE_STRING "SUNDIALS 2.5.0")
 SET(PACKAGE_TARNAME "sundials")
-SET(PACKAGE_VERSION "2.4.0")
+SET(PACKAGE_VERSION "2.5.0")
 
 # Prohibit in-source build
 
@@ -229,6 +229,7 @@
 
 IF(UNIX)
   OPTION(USE_GENERIC_MATH "Use generic (std-c) math libraries" ON)
+  MESSAGE(STATUS  "Use generic (std-c) math libraries")
   IF(USE_GENERIC_MATH)
     # executables will be linked against -lm 
     SET(EXTRA_LINK_LIBS -lm)
Index: sundials-2.5.0/config/SundialsLapack.cmake
===================================================================
--- sundials-2.5.0.orig/config/SundialsLapack.cmake	2012-07-09 16:10:55.000000000 +0200
+++ sundials-2.5.0/config/SundialsLapack.cmake	2012-07-09 16:14:55.000000000 +0200
@@ -31,9 +31,9 @@
 endif(NOT LAPACK_LIBRARIES)
 # If using a GNU C compiler, it is quite likely we'll want LAPACK_LINKER_FLAGS
 # to include -lg2c (if not already present)
-if(CMAKE_COMPILER_IS_GNUCC AND NOT LAPACK_LINKER_FLAGS MATCHES "g2c")
-  set(LAPACK_LINKER_FLAGS "${LAPACK_LINKER_FLAGS} -lg2c")
-endif(CMAKE_COMPILER_IS_GNUCC AND NOT LAPACK_LINKER_FLAGS MATCHES "g2c")
+if(CMAKE_COMPILER_IS_GNUCC AND NOT LAPACK_LINKER_FLAGS MATCHES "gfortran")
+  set(LAPACK_LINKER_FLAGS "${LAPACK_LINKER_FLAGS} -lgfortran")
+endif(CMAKE_COMPILER_IS_GNUCC AND NOT LAPACK_LINKER_FLAGS MATCHES "gfortran")
 # If we have the LAPACK libraries, test them
 if(LAPACK_LIBRARIES)
   message(STATUS "Looking for LAPACK libraries... OK")
@@ -69,7 +69,9 @@
     "}\n")
   # Attempt to link the "ltest" executable
   try_compile(LTEST_OK ${LapackTest_DIR} ${LapackTest_DIR}
-    ltest OUTPUT_VARIABLE MY_OUTPUT)    
+    ltest
+    LINK_LIBRARIES ${LAPACK_LIBRARIES}
+    OUTPUT_VARIABLE MY_OUTPUT)
   # To ensure we do not use stuff from the previous attempts, 
   # we must remove the CMakeFiles directory.
   file(REMOVE_RECURSE ${LapackTest_DIR}/CMakeFiles)
Index: sundials-2.5.0/config/SundialsFortran.cmake
===================================================================
--- sundials-2.5.0.orig/config/SundialsFortran.cmake	2012-07-09 16:10:55.000000000 +0200
+++ sundials-2.5.0/config/SundialsFortran.cmake	2012-07-09 16:14:25.000000000 +0200
@@ -52,6 +52,7 @@
   # and an executable "ftest"
   file(WRITE ${FortranTest_DIR}/CMakeLists.txt
     "PROJECT(ftest Fortran)\n"
+    "CMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n"
     "SET(CMAKE_VERBOSE_MAKEFILE ON)\n"
     "SET(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\")\n"
     "SET(CMAKE_Fortran_FLAGS \"${CMAKE_Fortran_FLAGS}\")\n"
@@ -90,6 +91,7 @@
     # Overwrite CMakeLists.txt with one which will generate the "ctest1" executable
     file(WRITE ${FortranTest_DIR}/CMakeLists.txt
       "PROJECT(ctest1 C)\n"
+      "CMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n"
       "SET(CMAKE_VERBOSE_MAKEFILE ON)\n"
       "SET(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\")\n"
       "SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n"
@@ -134,6 +136,7 @@
     # Practically a duplicate of the previous steps.
     file(WRITE ${FortranTest_DIR}/CMakeLists.txt
       "PROJECT(ctest2 C)\n"
+      "CMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n"
       "SET(CMAKE_VERBOSE_MAKEFILE ON)\n"
       "SET(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\")\n"
       "SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n"
Index: sundials-2.5.0/config/FindLAPACK.cmake
===================================================================
--- sundials-2.5.0.orig/config/FindLAPACK.cmake	2012-07-09 16:10:55.000000000 +0200
+++ sundials-2.5.0/config/FindLAPACK.cmake	2012-07-09 16:14:25.000000000 +0200
@@ -30,7 +30,7 @@
   check_fortran_function_exists(cheev LAPACK_BLAS_WORKS)
   mark_as_advanced(LAPACK_BLAS_WORKS)
   if(LAPACK_BLAS_WORKS)
-    set(LAPACK_FOUND TRUE)
+    #???set(LAPACK_FOUND TRUE)
     set(LAPACK_LIBRARIES ${BLAS_LIBRARIES})
   endif(LAPACK_BLAS_WORKS)
   # Generic LAPACK library?
@@ -81,7 +81,7 @@
 
 if(NOT LAPACK_FIND_QUIETLY)
   if(LAPACK_FOUND)
-    message(STATUS "A library with LAPACK API found.")
+    message(STATUS "A library with LAPACK API found ${LAPACK_LIBRARIES}")
   else(LAPACK_FOUND)
     if(LAPACK_FIND_REQUIRED)
       message(FATAL_ERROR 
